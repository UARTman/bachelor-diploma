
#set text(font: "Times New Roman", size: 12pt, lang: "ru")
#set page(paper: "a4", margin: (left: 10mm, right: 10mm, top: 20mm, bottom: 20mm), header: [])
#set table(stroke: 0.5pt + black)

#let raw-iosevka(it) = {
  set text(
    font: "Iosevka Extended",
    features: (calt: 0, IDRS: 1)
  )
  it
}

#let raw-idris(it) = {
  set raw(
    syntaxes: "idris2.sublime-syntax",
    theme: "idris2.tmTheme",
  )
  it
}

#let idris-setup(it) = {
  show raw: raw-iosevka
  show raw.where(lang: "idris"): set raw(
    syntaxes: "idris2.sublime-syntax",
    theme: "idris2.tmTheme",
  )

  show raw.where(lang: "idris2"): set raw(
    syntaxes: "idris2.sublime-syntax",
    theme: "idris2.tmTheme",
  )

  it
}

#show: idris-setup


#let document-id = [RU.17701729.04.43-01 ТЗ 01-1-ЛУ]
#let vertical-table = rotate(-90deg, reflow: true)[
  #table(
    columns: 5,
    rows: (9mm, 9mm),
    [*Инв. № подл.*], [*Подп. и дата*], [*Взам. инв. №*], [*Инв. № дубл.*], [*Подп. и дата*],
  )
]
#let title-grid(table, mainText) = grid(
  columns: (20mm, 1fr),
  rows: 100%,
  align(horizon, table), mainText,
)
#let project-name = [МОНОМОРФИЗАТОР НЕРЕКУРСИВНЫХ ЗАВИСИМЫХ ТИПОВ]
#let document-name = [Техническое задание]

#title-grid(
  vertical-table,
  [
    #align(center)[
      #align(center)[
        *
        ПРАВИТЕЛЬСТВО РОССИЙСКОЙ ФЕДЕРАЦИИ \
        ФЕДЕРАЛЬНОЕ ГОСУДАРСТВЕННОЕ АВТОНОМНОЕ \
        ОБРАЗОВАТЕЛЬНОЕ УЧРЕЖДЕНИЕ ВЫСШЕГО ОБРАЗОВАНИЯ \
        НАЦИОНАЛЬНЫЙ ИССЛЕДОВАТЕЛЬСКИЙ УНИВЕРСИТЕТ \
        "ВЫСШАЯ ШКОЛА ЭКОНОМИКИ"
        *

        Факультет компьютерных наук \
        Образовательная программа бакалавриата "Программная инженерия"

        \

        #grid(
          columns: (1fr, 1fr),
          rows: auto,
          align(center)[
            СОГЛАСОВАНО \
            Руководитель,\
            профессор департамента \
            программной инженерии \
            факультета компьютерных наук, \
            доктор физико-математических наук \
            \
            #("_" * 18) А.К. Петренко \
            "#underline[16]" #underline[мая] 2025 г.

          ],
          align(center)[
            УТВЕРЖДАЮ \
            Академический руководитель \
            образовательной программы \
            «Программная инженерия» \
            старший преподаватель департамента \
            программной инженерии \
            \
            #("_" * 18) Н.А. Павлочев \
            "#underline[16]" #underline[мая] 2025 г.
          ],
        )

        \
        \

        *#project-name*

        \
        \

        #set text(size: 14pt)

        *#document-name*

        *ЛИСТ УТВЕРЖДЕНИЯ*

        *#document-id*
        #set text(size: 12pt)

        #(par()[] * 3)

        #grid(columns: (50%, 50%),
          [
            #set align(center)
            Соруководитель, \
            научный сотрудник ИСП РАН \
            #("_" * 15) Д.В. Буздалов \
            "#underline[16]" #underline[мая] 2025 г.

          ],
          [
            #set align(center)
            Исполнитель \
            студент группы БПИ211 \
            #("_" * 15) А.А. Гусев \
            "#underline[16]" #underline[мая] 2025 г.
          ])

        #align(bottom)[
          #set text(size: 14pt)
          *Москва 2025*
        ]
      ]
    ]
  ],
)

#pagebreak()

#title-grid(
  vertical-table,
  [
    #align(left)[
      #block(width: 50%)[
        #align(center)[
          УТВЕРЖДЕН \
          #document-id
        ]
      ]
    ]
    #(par()[] * 10)
    #set align(center)
    *#project-name*
    #set text(size: 14pt)

    *#document-name*

    *#document-id*

    *Листов #context {counter(page).final().at(0)}*

    #align(bottom)[
      *Москва 2025*
    ]

  ],
)

#let htable = table(
  columns : (auto, 1fr, 1fr, 1fr, 1fr),
  rows: (1.5em, 1.5em, 1.5em, 1.5em),
  [], [], [], [], [],
  [Изм.], [Лист], [№ докум.], [Подп.], [Дата],
  [#document-id], [], [], [], [],
  [Инв. № подл.], [Подп. и дата], [Взам. Инв. №], [Инв. № дубл.], [Подп. и дата],
)

#set page(
  margin: (left: 30mm, right: 10mm, top: 30mm, bottom: 35mm),
  header: align(center)[
    // *
    #context counter(page).get().at(0) \
    #document-id
    // *
  ], footer: align(top + center)[
    #set text(size: 11pt)
    #set align(left)
    #htable
  ],
  footer-descent: 15pt,
  header-ascent: 15pt
)

#set par(justify: true, first-line-indent: (amount: 1.25cm, all: true), spacing: 1.2em, leading: 1.2em)
#set heading(numbering: "1.1")

#show heading: it => [
  #set text(size: 12pt, font: "Times New Roman", lang: "ru", weight: "regular")
  #set par(justify: true)
  #if (it.depth == 1) [
    #set block(spacing: 1.2em)
    #set align(center)
    #upper[*#it*]
  ] else [
    #set block(spacing: 1.2em)
    #pad(left: 1.25cm)[*#it*]
  ]
]

#let list-depth = counter("list-depth")
#show enum: it => {
  list-depth.step()
  context list-depth.display(n => {
    if n == 1 {
      block(inset: (left: 1.25cm))[
        #it
      ]
    } else {
      it
    }
  })
  list-depth.update(n => n - 1)
}
#show list: it => {
  list-depth.step()
  context list-depth.display(n => {
    if n == 1 {
      block(inset: (left: 1.25cm))[
        #it
      ]
    } else {
       block(inset: (left: 1cm))[
        #it
      ]
    }
  })
  list-depth.update(n => n - 1)
}

#let thead = heading.with(numbering: none)

  #show figure: it2 => [
    #show raw.where(block: true): it => [
      #block(stroke: black + .5pt, inset: 10pt, width: 80%)[
        #set align(left)
        #it
      ]
    ]
    #if it2.kind == raw {
      // c_listings.step()
    }
    #if it2.kind == image {
      // c_drawings.step()
    }
    #if it2.kind == raw {
      set block(breakable: true)
      it2
    } else {
      it2
    }
  ]

#thead(outlined: false)[АННОТАЦИЯ]

Техническое задание – это основной документ, оговаривающий набор требований и порядок
создания программного продукта, в соответствии с которым производится разработка программы,
ее тестирование и приемка.

Настоящее Техническое задание на разработку "Мономорфизатор нерекурсивных зависимых типов"
содержит следующие разделы: «Введение», «Основание для разработки»,
«Назначение разработки», «Требования к программе», «Требования к программным документам»,
«Технико-экономические показатели», «Стадии и этапы разработки», «Порядок контроля и
приемки» и приложения.

В разделе «Введение» указано наименование и краткая характеристика области применения
программы.

В разделе «Основания для разработки» указан документ, на основании которого ведется
разработка и наименование темы разработки.

В разделе «Назначение разработки» указано функциональное и эксплуатационное
назначение программного продукта.

Раздел «Требования к программе» содержит основные требования к функциональным
характеристикам, к надежности, к условиям эксплуатации, к составу и параметрам технических
средств, к информационной и программной совместимости, к маркировке и упаковке, к
транспортировке и хранению, а также специальные требования.

Раздел «Требования к программным документам» содержит состав
программной документации и специальные требования к ней.

Раздел «Технико-экономические показатели» содержит ориентировочную экономическую
эффективность, предполагаемую годовую потребность, экономические преимущества разработки
программы.

Настоящий документ разработан в соответствии с требованиями:
+ ГОСТ 19.101-77 Виды программ и программных документов @gost19101;
+ ГОСТ 19.102-77 Стадии разработки @gost19102;
+ ГОСТ 19.103-77 Обозначения программ и программных документов @gost19103;
+ ГОСТ 19.104-78 Основные надписи @gost19104;
+ ГОСТ 19.105-78 Общие требования к программным документам @gost19105;
+ ГОСТ 19.106-78 Требования к программным документам, выполненным печатным способом
@gost19106;
+ ГОСТ 19.201-78 Техническое задание. Требования к содержанию и оформлению @gost19201.
Изменения к данному Техническому заданию оформляются согласно ГОСТ 19.603-78 @gost19603,
ГОСТ 19.604-78 @gost19604.

// Раздел «Стадии и этапы разработки» содержит стадии разработки, этапы и содержание работ.
// В разделе «Порядок контроля и приемки» указаны общие требования к приемке работы.

#pagebreak()
#thead[СОДЕРЖАНИЕ]

#outline(title: none)
#pagebreak()
= НАЗНАЧЕНИЕ ПРОГРАММЫ
== Наименование программы
Наименование программы -- "Мономорфизатор нерекурсивных зависимых типов".

Наименование программы на английском языке -- "Non-recursive dependent type monomorphiser".

Краткое наименование программы -- "Мономорфизатор".
== Краткая характеристика области применения программы

Мономорфизатор нерекурсивных зависимых типов -- метапрограмма, позволяющая производить мономорфизацию подмножества типов языка Idris2. Помимо этого, она предоставляет API для унификации выражений Idris2, подстановки в них значений переменных, и их анализа на предмет наличия квотирования и затенения переменных.

Мономорфизатор предназначен для дальнейшей интеграции в дериватор библиотеки property-based тестирования DepTyCheck. Это расширит множество типов, для которых DepTyCheck поддерживает автоматическое выведение реализации генераторов значений.

В настоящий момент, DepTyCheck не поддерживает выведение генераторов для параметрически полиморфных типов, имеющих типовые параметры. После внедрения мономорфизатора, DepTyCheck получит возможность выводить генераторы для вариантов параметрически полиморфных типов, в которых известны все типовые параметры путём их мономорфизации.

#pagebreak()
= ОСНОВАНИЯ ДЛЯ РАЗРАБОТКИ

== Документы, на основании которых ведется разработка

Разработка ведется на основании приказа НИУ "Высшая Школа Экономики" академического руководителя ОП "Программная инженерия" Н.А. Павлочева №2.3-02/131224-1 "Об утверждении тем и руководителей выпускных квалификационных работ студентов образовательной программы «Программная инженерия» факультета компьютерных наук.

== Наименование темы разработки

Программа выполнена в рамках темы выпускной квалификационной работы "Разработка алгоритма мономорфизации нерекурсивных структур данных с зависимыми типами и его программная реализация" в соответствии с учебным планом подготовки бакалавров (НИУ ВШЭ, факультет компьютерных наук) по направлению "Программная инженерия".

#pagebreak()
= НАЗНАЧЕНИЕ РАЗРАБОТКИ
== Функциональное назначение

Мономорфизатор зависимых типов -- программа, позволяющая автоматически определять для полиморфных типов языка Idris2 их мономорфные варианты с подставленным набором аргументов и автоматически выводить для этих мономорфных типов

== Эксплуатационное назначение

Мономорфизатор зависимых типов предназначается для внедрения в дериватор библиотеки property-based тестирования для языка Idris2 "DepTyCheck". Внедрение мономорфизатора расширит возможности дериватора в области автоматического вывода генераторов значений параметрически полиморфных типов.

#pagebreak()
= ТРЕБОВАНИЯ К ПРОГРАММЕ

== Требования к функциональным характеристикам

=== Требования к составу выполняемых функций

Мономорфизатор нерекурсивных зависимых типов выполняет три функции: мономорфизацию типов, унификацию типовых выражений, и подстановку значений в выражения.

==== Мономорфизация типов
Мономорфизатор проводит мономорфизацию нерекурсивных типов Idris2. Получая на вход тип и набор значений параметров типа, мономорфизатор создаёт вариант этого типа с подставленными значениями этих параметров. Параметры полиморфного типа, для которых не было предоставлено значение, остаются параметрами мономорфного типа.

Мономорфный тип должен содержать конструкторы, аналогичные конструкторам полиморфного типа, которые могут создавать значения полиморфного типа с подставленными аргументами.

#figure(caption: "Пример результата мономорфизации")[
  ```idris
  data Vect : Nat -> Type -> Type where
    Nil : Vect 0 t
    (::) : t -> Vect n t -> Vect (S n) t

  data Vect0String : Type where
    Nil : Vect0String

  data Vect5 : Type -> Type
    (::) : t -> Vect 4 t -> Vect5 t
  ```
]

Мономорфизатор автоматически выводит методы конвертации значений мономорфного типа в значения полиморфного типа и обратно. Эти методы предоставляются пользователю в виде реализации интерфейса стандартной библиотеки Idris2 `Cast`.  Конвертация должна быть эквивалентной, т.е. при конвертации не должно происходить потери или изменения данных.

Если изначальный тип реализует методы сравнения значений типа (интерфейс стандартной библиотеки Idris2 `Eq`), мономорфизатор автоматически выводит реализацию этого интерфейса для мономорфного типа.

Если изначальный тип реализует методы визуализации значений типа в виде строки (интерфейс стандартной библиотеки Idris2 `Show`), мономорфизатор автоматически выводит реализацию этого интерфейса для мономорфного типа.

/* Если изначальный тип реализует методы решаемого равенства  -- возможность для двух равных значений типа получить доказательство их равенства -- в виде реализации интерфейса стандартной библиотеки Idris2 `DecEq`, мономорфизатор автоматически выводит реализацию этого интерфейса для мономорфного типа. */

==== Унификация типовых выражений

Для проведения мономорфизации мономорфизатор проводит унификацию типовых выражений.

При унификации для пары выражений и наборов свободных переменных в них, необходимо найти такую пару подстановок значений свободных переменных, при которой выражения эквивалентны, или определить невозможность такой подстановки. При неоднозначности возможности подстановки, необходимо предоставить набор равенств, которые должны выполняться для успешной унификации.

==== Подстановка значений в выражения Idris2

В процессе проведения мономорфизации проводится подстановка значений переменных в выражения Idris2. Подстановка должна быть семантически корректной: при затенении (переопределении) переменных внутри выражений и использовании литералов квотирования, подстановка в затенённые и квотированные обращения к переменным не должна происходить.

=== Требования к организации входных данных

Мономорфизатор нерекурсивных зависимых типов является функцией на языке Idris2, принимающей три аргумента: задание мономорфизации, название выходного типа, и набор опциональных настроек работы мономорфизатора.

Задание мономорфизации имеет тип `Type` или тип функции, возвращающей `Type`. Оно должно являться вызовом обобщённого типа с полным набором аргументов (в случае полной мономорфизации типа) или лямбда-функцией, возвращающей вызов обобщённого типа (в случае неполной мономорфизации). В последнем случае лямбда-функция может возвращать вызов типа с неполным наборе аргументов -- оставшиеся аргументы будут считаться свободными. Задание мономорфизации не может являться вызовом функции, оперирующей над типами.

#figure(caption: [Примеры заданий мономорфизации])[
```idris
-- Корректные задачи мономорфизации
monomorphise (List Nat) "ListNat"
monomorphise (\x=>Vect x String) "VectString"
monomorphise (\l=>Vect (l+1)) "VectPlusOne"
--- Некорректные задачи мономорфизации
transformType : Type -> Type
monomorphise (transformType String)
```
]

Название выходного типа является значением типа `Name` и обязано не пересекаться с ранее объявленными названиями модулей и пространств имён.

Набор опциональных настроек мономорфизатора представляет из себя структуру данных, где каждое поле отвечает за одну из внутренних настроек мономорфизатора. С его помощью пользователь может отключать определённые функции мономорфизатора, такие как автоматическое выведение интерфейсов или реализацию конвертирования.

=== Требования к организации выходных данных

Мономорфизатор нерекурсивных зависимых типов предполагает три типа выходных данных: сгенерированный вариант типа и реализация функций, передающиеся компилятору, ошибки мономорфизатора, и сообщения отладки.

==== Сгенерированный вариант типа и реализация фунций

В результате успешного завершения работы мономорфизатора, компилятору передаются сгенерированные определения пространства имён, типа, и функций. Далее они проверяются компилятором и вставляются в программу в месте вызова мономорфизатора.

В коде, следующем за вызовом мономорфизатора, а также в модулях, ссылающихся на модуль, в котором был сделан вызов мономорфизатора, можно обращаться к типам и функциям, сгенерированным мономорфизатором.

Код, сгенерированный мономорфизатором, должен успешно компилироваться и корректно выполнять функции, указанные в разделе 4.1.1.

==== Ошибки мономорфизатора

Получение некорректных входных данных приводит к аварийному завершению работы мономорфизатора и ошибке компиляции. Сообщение об ошибке, возвращаемое мономорфизатором, отражается в сообщении об ошибке компиляции.

==== Сообщения отладки

При включённой функции логгирования языка Idris2 для темы "monomorphiser" любого уровня $>=1$, мономорфизатор выводит отладочные сообщения.

В отладочные сообщения входят:
- Тип, который мономорфизируется
- Задачи унификации конструкторов
- Результаты унификации конструкторов
- Сгенерированные декларации типов и функций

== Требования к временных характеристикам

Требования к временным характеристикам программы не предъявляются.

== Требования к интерфейсу

Мономорфизатор представляет собой метапрограмму на языке Idris2. Таковые имеют вид функции на этом языке, возвращающей значение монады `Language.Reflection.Elab`.

Функция мономорфизации объявлена в модуле `Language.Reflection.Monomorphisation` под названием `monomorphise`.

== Требования к надёжности

При выполнении требований к входным данным не должно происходить аварийного завершения работы программы, а код, сгенерированный мономорфизатором, должен успешно проходить компиляцию и отвечать функциональным требованиям.

== Условия эксплуатации

== Требования к составу и параметрам технических средств

Для запуска мономорфизатора необходима ОС Linux, запущенная на процессоре архитектуры x86_64.

== Требования к информационной и программной совместимости

Мономорфизатор должен компилироваться и запускаться последней версией языка Idris2.

=== Требования к исходным кодам и языкам программирования

Мономорфизатор представляет собой метапрограмму на языке Idris2.

== Требования к маркировке и упаковке

Программа распространяется в виде электронного пакета, содержащего
программную документацию, приложение (исполняемые файлы и прочие необходимые
для работы файлы)

== Требования к транспортировке и хранению

Программный продукт может храниться и транспортироваться на любом носителе
информации или в облачном хранилище.

#pagebreak()

= ТРЕБОВАНИЯ К ПРОГРАММНОЙ ДОКУМЕНТАЦИИ

== Состав программной документации
+ "Разработка алгоритма мономорфизации нерекурсивных зависимых типов и его программная реализация". Отчёт по ВКР.
+ "Мономорфизатор нерекурсивных зависимых типов". Техническое задание;
+ "Мономорфизатор нерекурсивных зависимых типов". Руководство оператора;
+ "Мономорфизатор нерекурсивных зависимых типов". Текст программы;
+ "Мономорфизатор нерекурсивных зависимых типов". Программа и методика испытаний;

== Специальные требования к программной документации
1. Документы к программе должны быть выполнены в соответствии с ГОСТ 19.106-78 и ГОСТами к каждому виду документа;
2. Текст ВКР должен быть загружен в систему Антиплагиат через LMS «НИУ ВШЭ». Лист, подтверждающий загрузку пояснительной записки, сдается в учебный офис вместе со всеми материалами не позже, чем за день до защиты выпускной квалификационной работы;
3. Документация и программа также сдается в электронном виде в формате .pdf или .docx. в архиве формата .zip или .rar.
4. Все документы перед защитой выпускной квалификационной работы должны быть загружены в информационно-образовательную среду НИУ ВШЭ LMS (Learning Management System) в личном кабинете, дисциплина - «Выпускная квалификационная работа», одним архивом.
#pagebreak()
= ТЕХНИКО-ЭКОНОМИЧЕСКИЕ ПОКАЗАТЕЛИ

== Ориентировочная экономическая эффективность

В рамках данной работы экономической эффективности не предусмотрено.

== Предполагаемая потребность

Приложение будет интегрировано в библиотеку propery-based тестирования DepTyCheck и расширит множество поддерживаемых её дериватором типов. Также приложение будет доступно для использования в других метапрограммах на языке Idris2, для которых необходима мономорфизация или унификация типов.

== Экономические преимущества разработки по сравнению с отечественными и зарубежными аналогами

В настоящий момент единственный инструмент, способный проводить мономорфизацию и унификацию типов языка Idris2 -- сам компилятор Idris2. При этом многие компоненты компилятора Idris2 невозможно использовать в контексте метапрограмм на Idris2 -- т.е. в контексте, где наиболее вероятна необходимость мономорфизации или унификации типов.

#pagebreak()
#bibliography("sources.bib", title: [СПИСОК ИСТОЧНИКОВ], style: "gost-r-705-2008-numeric")
#pagebreak()
#set page(margin: (left: 1cm))
#thead[ЛИСТ РЕГИСТРАЦИИ ИЗМЕНЕНИЙ]
#table(
  columns: 10,
  rows: (auto, auto) + (1.7em,) * 23,
  table.cell(rowspan: 2)[зм.],
  table.cell(colspan: 4)[Номера листов (страниц)],
  table.cell(rowspan: 2)[Всего листов (страниц) в документе],
  table.cell(rowspan: 2)[№ документа],
  table.cell(rowspan: 2)[Входящий № сопроводительного документа и дата],
  table.cell(rowspan: 2)[Подпись],
  table.cell(rowspan: 2)[Дата],
  table.cell()[измененных],
  table.cell()[замененных],
  table.cell()[новых],
  table.cell()[аннулированных],
)

