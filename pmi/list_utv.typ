
#set text(font: "Times New Roman", size: 12pt, lang: "ru")
#set page(paper: "a4", margin: (left: 10mm, right: 10mm, top: 20mm, bottom: 20mm), header: [])
#set table(stroke: 0.5pt + black)

#let raw-iosevka(it) = {
  set text(
    font: "Iosevka Extended",
    features: (calt: 0, IDRS: 1)
  )
  it
}

#let raw-idris(it) = {
  set raw(
    syntaxes: "idris2.sublime-syntax",
    theme: "idris2.tmTheme",
  )
  it
}

#let idris-setup(it) = {
  show raw: raw-iosevka
  show raw.where(lang: "idris"): set raw(
    syntaxes: "idris2.sublime-syntax",
    theme: "idris2.tmTheme",
  )

  show raw.where(lang: "idris2"): set raw(
    syntaxes: "idris2.sublime-syntax",
    theme: "idris2.tmTheme",
  )

  it
}

#show: idris-setup


#let document-id = [RU.17701729.04.43-01 51 01-1-ЛУ]
#let vertical-table = rotate(-90deg, reflow: true)[
  #table(
    columns: 5,
    rows: (9mm, 9mm),
    [*Инв. № подл.*], [*Подп. и дата*], [*Взам. инв. №*], [*Инв. № дубл.*], [*Подп. и дата*],
  )
]
#let title-grid(table, mainText) = grid(
  columns: (20mm, 1fr),
  rows: 100%,
  align(horizon, table), mainText,
)
#let project-name = [МОНОМОРФИЗАТОР НЕРЕКУРСИВНЫХ ЗАВИСИМЫХ ТИПОВ]
#let document-name = [Программа и методика испытаний]

#title-grid(
  vertical-table,
  [
    #align(center)[
      #align(center)[
        *
        ПРАВИТЕЛЬСТВО РОССИЙСКОЙ ФЕДЕРАЦИИ \
        ФЕДЕРАЛЬНОЕ ГОСУДАРСТВЕННОЕ АВТОНОМНОЕ \
        ОБРАЗОВАТЕЛЬНОЕ УЧРЕЖДЕНИЕ ВЫСШЕГО ОБРАЗОВАНИЯ \
        НАЦИОНАЛЬНЫЙ ИССЛЕДОВАТЕЛЬСКИЙ УНИВЕРСИТЕТ \
        "ВЫСШАЯ ШКОЛА ЭКОНОМИКИ"
        *

        Факультет компьютерных наук \
        Образовательная программа бакалавриата "Программная инженерия"

        \

        #grid(
          columns: (1fr, 1fr),
          rows: auto,
          align(center)[
            СОГЛАСОВАНО \
            Руководитель,\
            профессор департамента \
            программной инженерии \
            факультета компьютерных наук, \
            доктор физико-математических наук \
            \
            #("_" * 18) А.К. Петренко \
            "#underline[24]" #underline[апреля] 2025 г.

          ],
          align(center)[
            УТВЕРЖДАЮ \
            Академический руководитель \
            образовательной программы \
            «Программная инженерия» \
            старший преподаватель департамента \
            программной инженерии \
            \
            #("_" * 18) Н.А. Павлочев \
            "#underline[24]" #underline[апреля] 2025 г.
          ],
        )

        \
        \

        *#project-name*

        \
        \

        #set text(size: 14pt)

        *#document-name*

        *ЛИСТ УТВЕРЖДЕНИЯ*

        *#document-id*
        #set text(size: 12pt)

        #(par()[] * 3)

        #grid(columns: (50%, 50%),
          [
            #set align(center)
            Соруководитель, \
            научный сотрудник ИСП РАН \
            #("_" * 15) Д.В. Буздалов \
            "#underline[24]" #underline[апреля] 2025 г.

          ],
          [
            #set align(center)
            Исполнитель \
            студент группы БПИ211 \
            #("_" * 15) А.А. Гусев \
            "#underline[24]" #underline[апреля] 2025 г.
          ])

        #align(bottom)[
          #set text(size: 14pt)
          *Москва 2025*
        ]
      ]
    ]
  ],
)

#pagebreak()

#title-grid(
  vertical-table,
  [
    #align(left)[
      #block(width: 50%)[
        #align(center)[
          УТВЕРЖДЕН \
          #document-id
        ]
      ]
    ]
    #(par()[] * 10)
    #set align(center)
    *#project-name*
    #set text(size: 14pt)

    *#document-name*

    *#document-id*

    *Листов #context {counter(page).final().at(0)}*

    #align(bottom)[
      *Москва 2025*
    ]

  ],
)

#let htable = table(
  columns : (auto, 1fr, 1fr, 1fr, 1fr),
  rows: (1.5em, 1.5em, 1.5em, 1.5em),
  [], [], [], [], [],
  [Изм.], [Лист], [№ докум.], [Подп.], [Дата],
  [#document-id], [], [], [], [],
  [Инв. № подл.], [Подп. и дата], [Взам. Инв. №], [Инв. № дубл.], [Подп. и дата],
)

#set page(
  margin: (left: 30mm, right: 10mm, top: 30mm, bottom: 35mm),
  header: align(center)[
    // *
    #context counter(page).get().at(0) \
    #document-id
    // *
  ], footer: align(top + center)[
    #set text(size: 11pt)
    #set align(left)
    #htable
  ],
  footer-descent: 15pt,
  header-ascent: 15pt
)

#set par(justify: true, first-line-indent: (amount: 1.25cm, all: true), spacing: 1.1em, leading: 1.1em)
#set heading(numbering: "1.1")

#show heading: it => [
  #set text(size: 12pt, font: "Times New Roman", lang: "ru", weight: "regular")
  #set par(justify: true)
  #if (it.depth == 1) [
    #set block(spacing: 1.1em)
    #set align(center)
    #upper[*#it*]
  ] else [
    #set block(spacing: 1.1em)
    #pad(left: 1.25cm)[*#it*]
  ]
]

#let list-depth = counter("list-depth")
#show enum: it => {
  list-depth.step()
  context list-depth.display(n => {
    if n == 1 {
      block(inset: (left: 1.25cm))[
        #it
      ]
    } else {
      it
    }
  })
  list-depth.update(n => n - 1)
}
#show list: it => {
  list-depth.step()
  context list-depth.display(n => {
    if n == 1 {
      block(inset: (left: 1.25cm))[
        #it
      ]
    } else {
       block(inset: (left: 1cm))[
        #it
      ]
    }
  })
  list-depth.update(n => n - 1)
}

#let thead = heading.with(numbering: none)

  #show figure: it2 => [
    #show raw.where(block: true): it => [
      #block(stroke: black + .5pt, inset: 10pt, width: 80%)[
        #set align(left)
        #it
      ]
    ]
    #if it2.kind == raw {
      // c_listings.step()
    }
    #if it2.kind == image {
      // c_drawings.step()
    }
    #if it2.kind == raw {
      set block(breakable: true)
      it2
    } else {
      it2
    }
  ]

#thead(outlined: false)[АННОТАЦИЯ]


#pagebreak()
#thead[СОДЕРЖАНИЕ]

#outline(title: none)
#pagebreak()
= ОБЪЕКТ ИСПЫТАНИЙ
== Наименование программы
Наименование программы -- "Мономорфизатор нерекурсивных зависимых типов".

Наименование программы на английском языке -- "Non-recursive dependent type monomorphiser".

Краткое наименование программы -- "Мономорфизатор".
== Краткая характеристика области применения программы

Мономорфизатор нерекурсивных зависимых типов -- метапрограмма, позволяющая производить мономорфизацию подмножества типов языка Idris2. Помимо этого, она предоставляет API для унификации выражений Idris2, подстановки в них значений переменных, и их анализа на предмет наличия квотирования и затенения переменных.

Мономорфизатор предназначен для дальнейшей интеграции в дериватор библиотеки property-based тестирования DepTyCheck. Это расширит множество типов, для которых DepTyCheck поддерживает автоматическое выведение реализации генераторов значений.

В настоящий момент, DepTyCheck не поддерживает выведение генераторов для параметрически полиморфных типов. После внедрения мономорфизатора, DepTyCheck получит возможность выводить генераторы для вариантов параметрически полиморфных типов, в которых известны все типовые параметры путём их мономорфизации.

#pagebreak()
= ЦЕЛЬ ИСПЫТАНИЙ

Основная цель испытаний – проверка заявленных в техническом задании требований к выполняемым функциям и программной документации.

#pagebreak()
= ТРЕБОВАНИЯ К ПРОГРАММЕ

== Требования к функциональным характеристикам

=== Требования к составу выполняемых функций

Мономорфизатор нерекурсивных зависимых типов выполняет три функции: мономорфизацию типов, унификацию типовых выражений, и подстановку значений в выражения.

==== Мономорфизация типов
Мономорфизатор проводит мономорфизацию нерекурсивных типов Idris2. Получая на вход тип и набор значений параметров типа, мономорфизатор создаёт вариант этого типа с подставленными значениями этих параметров. Параметры полиморфного типа, для которых не было предоставлено значение, остаются параметрами мономорфного типа.

Мономорфный тип должен содержать конструкторы, аналогичные конструкторам полиморфного типа, которые могут создавать значения полиморфного типа с подставленными аргументами.

#figure(caption: "Пример результата мономорфизации")[
  ```idris
  data Vect : Nat -> Type -> Type where
    Nil : Vect 0 t
    (::) : t -> Vect n t -> Vect (S n) t

  data Vect0String : Type where
    Nil : Vect0String

  data Vect5 : Type -> Type
    (::) : t -> Vect 4 t -> Vect5 t
  ```
]

Мономорфизатор автоматически выводит методы конвертации значений мономорфного типа в значения полиморфного типа и обратно. Эти методы предоставляются пользователю в виде реализации интерфейса стандартной библиотеки Idris2 `Cast`.  Конвертация должна быть эквивалентной, т.е. при конвертации не должно происходить потери или изменения данных.

Если изначальный тип реализует методы сравнения значений типа (интерфейс стандартной библиотеки Idris2 `Eq`), мономорфизатор автоматически выводит реализацию этого интерфейса для мономорфного типа.

Если изначальный тип реализует методы визуализации значений типа в виде строки (интерфейс стандартной библиотеки Idris2 `Show`), мономорфизатор автоматически выводит реализацию этого интерфейса для мономорфного типа.

Если изначальный тип реализует методы решаемого равенства  -- возможность для двух равных значений типа получить доказательство их равенства -- в виде реализации интерфейса стандартной библиотеки Idris2 `DecEq`, мономорфизатор автоматически выводит реализацию этого интерфейса для мономорфного типа.

==== Унификация типовых выражений

Для проведения мономорфизации мономорфизатор проводит унификацию типовых выражений.

При унификации для пары выражений и наборов свободных переменных в них, необходимо найти такую пару подстановок значений свободных переменных, при которой выражения эквивалентны, или определить невозможность такой подстановки. При неоднозначности возможности подстановки, необходимо предоставить набор равенств, которые должны выполняться для успешной унификации.

==== Подстановка значений в выражения Idris2

В процессе проведения мономорфизации проводится подстановка значений переменных в выражения Idris2. Подстановка должна быть семантически корректной: при затенении (переопределении) переменных внутри выражений и использовании литералов квотирования, подстановка в затенённые и квотированные обращения к переменным не должна происходить.

== Требования к интерфейсу

Мономорфизатор нерекурсивных зависимых типов является функцией на языке Idris2, принимающей три аргумента: задание мономорфизации, название выходного типа, и набор опциональных настроек работы мономорфизатора.

Задание мономорфизации имеет тип `Type` или тип функции, возвращающей `Type`. Оно должно являться вызовом обобщённого типа с полным набором аргументов (в случае полной мономорфизации типа) или лямбда-функцией, возвращающей вызов обобщённого типа (в случае неполной мономорфизации). В последнем случае лямбда-функция может возвращать вызов типа с неполным наборе аргументов -- оставшиеся аргументы будут считаться свободными. Задание мономорфизации не может являться вызовом функции, оперирующей над типами.

#figure(caption: [Примеры заданий мономорфизации])[
```idris
-- Корректные задачи мономорфизации
monomorphise (List Nat) "ListNat"
monomorphise (\x=>Vect x String) "VectString"
monomorphise (\l=>Vect (l+1)) "VectPlusOne"
--- Некорректные задачи мономорфизации
transformType : Type -> Type
monomorphise (transformType String)
```
]

Название выходного типа является значением типа `Name` и обязано не пересекаться с ранее объявленными названиями модулей и пространств имён.

Набор опциональных настроек мономорфизатора представляет из себя структуру данных, где каждое поле отвечает за одну из внутренних настроек мономорфизатора. С его помощью пользователь может отключать определённые функции мономорфизатора, такие как автоматическое выведение интерфейсов или реализацию конвертирования.

В результате успешного завершения работы мономорфизатора, компилятору передаются сгенерированные определения пространства имён, типа, и функций. Далее они проверяются компилятором и вставляются в программу в месте вызова мономорфизатора.

В коде, следующем за вызовом мономорфизатора, а также в модулях, ссылающихся на модуль, в котором был сделан вызов мономорфизатора, можно обращаться к типам и функциям, сгенерированным мономорфизатором.


#pagebreak()
= ТРЕБОВАНИЯ К ПРОГРАММНОЙ ДОКУМЕНТАЦИИ

== Состав программной документации

+ "Разработка алгоритма мономорфизации нерекурсивных зависимо типизированных структур данных и его программная реализация". Отчёт по ВКР.
+ "Мономорфизатор нерекурсивных зависимых типов". Техническое задание;
+ "Мономорфизатор нерекурсивных зависимых типов". Руководство оператора;
+ "Мономорфизатор нерекурсивных зависимых типов". Текст программы;
+ "Мономорфизатор нерекурсивных зависимых типов". Программа и методика испытаний;

#pagebreak()
= СРЕДСТВА И ПОРЯДОК ИСПЫТАНИЙ

== Технические средства, используемые во время испытаний

Во время испытаний использовался персональный компьютер, оснащенный следующими техническими компонентами:
- Процессор Intel Core i9 13900H
- Более 256 GB свободного дискового пространства
- 16GB ОЗУ

== Программные средства, используемые во время испытаний
- Компилятор Idris2
- Встроенные инструменты тестирования поведения программ стандартной библиотеки Idris2 (`Test.Golde`)
- Библиотека hedgehog для Idris2

== Порядок проведения испытаний

#pagebreak()
= МЕТОДЫ ИСПЫТАНИЙ

== Проверка требований к программной документации

Проверка выполнения требований к программной документации происходит посредством визуального ознакомления с документацией и проверки её на соответствие описанным требованиям. Также визуально проверяется соответствие документации требованиям ГОСТ.

== Проверка требований к программному интерфейсу

Визуальный интерфейс программы отсутствует. Проверка соответствия требованиям к программному интерфейсу происходит вместе с проверкой требований к функциональным характерестикам.

== Проверка требований к функциональным характеристикам

Проверка соответствованию требованиям к функциональным характеристикам осуществляется посредством исполнения набора тестов, присутствующего в проекте. Этот набор состоит из unit-тестов и golden-тестов.

=== Unit-тестирование

Первая фаза проверки функциональных характеристик -- проверка работы функций подстановки значений переменных в выражение. Тесты, отвечающие за неё, располагаются в файле `test/src/Main.idr` и разделены на несколько групп:

- Тривиальные тесты. Проверяют подстановку значений в выражения, состоящие из одной переменной.
- Тесты `TTImp`. Проверяют затенение имён в выражениях, означающих типы функций, лямбда-функции, блоки с объявленными переменными, и pattern-матчинг.
- Тесты `Decl`. Проверяют затенение имён в декларациях и их влияние на последующие декларации.
- Тесты `Clause`. Проверяют затенение имён в ветвях pattern-матчинга.
- Тесты на квотирование. Проверяют семантическую корректность подстановки значений имён в присутствии квотирования.


=== Golden-тестирование

Далее проводится запуск Golden-тестов. Golden-тесты представляют собой программы на языке Idris2, для которых проверяется их успешные компиляция и выполнение. Они отвечают за проверку работы функций унификации и мономорфизации и располагаются в директории `test/unification`.

Каждый из тестов сосредоточен на мономорфизации конкретного типа и функционала, предоставленного мономорфизированным типом.

- Мономорфизация типа `List` -- проверка мономорфизации обыкновенных типов.
- Мономорфизация типа `Vect` -- проверка мономорфизации зависимых типов.
- Мономорфизация типа `SortedSet` -- проверка мономорфизации.
- Мономорфизация типа `Tag` -- проверка мономорфизации типов с Implicit-параметрами.

#pagebreak()
#bibliography("sources.bib", title: [СПИСОК ИСТОЧНИКОВ], style: "gost-r-705-2008-numeric", full: true)
#pagebreak()
#set page(margin: (left: 1cm))
#thead[ЛИСТ РЕГИСТРАЦИИ ИЗМЕНЕНИЙ]
#table(
  columns: 10,
  rows: (auto, auto) + (1.7em,) * 23,
  table.cell(rowspan: 2)[зм.],
  table.cell(colspan: 4)[Номера листов (страниц)],
  table.cell(rowspan: 2)[Всего листов (страниц) в документе],
  table.cell(rowspan: 2)[№ документа],
  table.cell(rowspan: 2)[Входящий № сопроводительного документа и дата],
  table.cell(rowspan: 2)[Подпись],
  table.cell(rowspan: 2)[Дата],
  table.cell()[измененных],
  table.cell()[замененных],
  table.cell()[новых],
  table.cell()[аннулированных],
)

